@model SiteTransasction

@{
    ViewBag.Title = "Manage";
}

<h2>Manage</h2>


@using (Html.BeginForm()) 
{
   
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.SiteID)
    @Html.HiddenFor(model => model.UserID)
    @Html.HiddenFor(model => model.ItemID)

    @Html.HiddenFor(model => model.QtyRemoved)
    @Html.Hidden("OriginalQty", (int) ViewBag.OriginalQty)

    <div class="form-horizontal">
        <h4>Appoint Goods To Site</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @if (Model?.SiteTransID >0)
        {
            @Html.HiddenFor(model => model.SiteTransID)
        }
      <div class="form-group">
            @Html.LabelFor(model => model.SiteID, "Site", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (ViewBag.FromSiteName !=null)
                {
                    @Html.Label((string)ViewBag.FromSiteName, new { @class = "form-control" })                    
                } else
                {
                <input type="text" id="SiteName" name="SiteName"  style="color:black;" data-autocomplete-idholder="#SiteID" data-autocombo-url="@Url.Action("AutoCompleteSite")" class="form-control" />
                }
                @Html.ValidationMessageFor(model => model.SiteID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SupplierID, "Supplier Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (ViewBag.SupplierName != null)
                {
                    @Html.Label((string)ViewBag.SupplierName, new { @class = "form-control" })
                    @Html.HiddenFor(model => model.SupplierID)
                }
                else
                {                    
                    @Html.DropDownListFor(model => model.SupplierID, null, new { @class = "form-control" })
                }
                @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ItemID, "Item", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (ViewBag.ItemName !=null)
                {
                    @Html.Label((string)ViewBag.ItemName, new { @class = "form-control"})
                } else
                {
                    <input type="text" id="ItemName" name="ItemName" style="color:black;" data-autocomplete-idholder="#ItemID" data-autocombo-url="@Url.Action("AutoCompleteItem")" class="form-control" />
                }
                @Html.ValidationMessageFor(model => model.ItemID, "", new { @class = "text-danger" })
            </div>
        </div>
  
        <div class="form-group">
            @Html.LabelFor(model => model.QtyAdded, "Quantity", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QtyAdded, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QtyAdded, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Remarks, "Remark", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

